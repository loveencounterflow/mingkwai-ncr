{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MINGKWAI-NCR'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ step }                  = require 'coffeenode-suspend'\n#...........................................................................................................\nNCR                       = require 'ncr'\nmodule.exports            = MKNCR = NCR._copy_library 'xncr'\nISL                       = MKNCR._ISL\nu                         = MKNCR.unicode_isl\n\n\n#===========================================================================================================\n# NEW API METHODS\n#-----------------------------------------------------------------------------------------------------------\nMKNCR.is_inner_glyph       = ( glyph     ) -> ( @as_csg glyph ) in [ 'u', 'jzr', ]\n# MKNCR.chr_from_cid_and_csg = ( cid, csg  ) -> CHR.as_chr cid, { csg: csg }\n# MKNCR.cid_range_from_rsg   = ( rsg       ) -> CHR.cid_range_from_rsg rsg\n# MKNCR.html_from_text       = ( glyph     ) -> CHR.html_from_text   glyph, settings\n\n#-----------------------------------------------------------------------------------------------------------\nMKNCR.jzr_as_uchr = ( glyph ) ->\n  return @as_uchr glyph if ( @as_csg glyph ) is 'jzr'\n  return glyph\n\n#-----------------------------------------------------------------------------------------------------------\nMKNCR.jzr_as_xncr = ( glyph ) ->\n  nfo = @analyze glyph\n  return glyph unless ( nfo.rsg is 'u-pua' ) or ( nfo.csg is 'jzr' )\n  return @as_chr nfo.cid, { csg: 'jzr', }\n\n#-----------------------------------------------------------------------------------------------------------\nMKNCR.normalize = ( glyph ) ->\n  throw new Error \"XNCHR.normalize is deprecated\"\n  rsg = @as_rsg glyph\n  cid = @as_cid glyph\n  csg = if rsg is 'u-pua' then 'jzr' else 'u'\n  return @chr_from_cid_and_csg cid, csg\n\n#-----------------------------------------------------------------------------------------------------------\nMKNCR.normalize_to_xncr = ( glyph ) ->\n  throw new Error \"do we need this method?\"\n  cid = @as_cid glyph\n  csg = if ( @as_rsg glyph ) is 'u-pua' then 'jzr' else @as_csg glyph\n  return @chr_from_cid_and_csg cid, csg\n\n#-----------------------------------------------------------------------------------------------------------\nMKNCR.normalize_to_pua = ( glyph ) ->\n  throw new Error \"do we need this method?\"\n  cid = @as_cid glyph\n  csg = @as_csg glyph\n  csg = 'u' if csg is 'jzr'\n  return @chr_from_cid_and_csg cid, csg\n\n\n#===========================================================================================================\n# NEW DATA\n#-----------------------------------------------------------------------------------------------------------\ndo =>\n  #.........................................................................................................\n  sim_tags = [\n    'sim/source/global'\n    'sim/source/components'\n    'sim/source/components/search'\n    'sim/source/false-identity'\n    'sim/target/global'\n    'sim/target/components'\n    'sim/target/components/search'\n    'sim/target/false-identity'\n    ]\n  #.........................................................................................................\n  recipe =\n    fallback:  'skip'\n    fields:\n      tag:  'tag'\n      rsg:  'assign'\n      sim:  'list'\n      # sim:  ( values, context ) ->\n      #   ### TAINT should be a standard reducer ###\n      #   debug '7701', values\n      #   R = {}\n      #   for value in values\n      #     for name, sub_value of value\n      #       R[ name ] = sub_value\n      #   return R\n      tex:  ( values, context ) ->\n        ### TAINT should be a standard reducer ###\n        R = {}\n        for value in values\n          for name, sub_value of value\n            R[ name ] = sub_value\n        return R\n    #.........................................................................................................\n  recipe[ 'fields' ][ sim_tag ] = 'list' for sim_tag in sim_tags\n  #.........................................................................................................\n  ### TAINT experimental ###\n  aggregate = ISL.aggregate.use u, recipe, memoize: yes\n  #.........................................................................................................\n  do =>\n    cache = {}\n    MKNCR.describe = ( P... ) ->\n      ### TAINT what about gaiji? ###\n      id                    = JSON.stringify P\n      return R if ( R = cache[ id ] )?\n      #.....................................................................................................\n      nfo                   = @analyze P...\n      { csg, rsg, }         = nfo\n      #.....................................................................................................\n      if csg is 'u' then  R = aggregate nfo[ 'cid' ]\n      else                R = {}\n      #.....................................................................................................\n      R[ key ]              = value for key, value of nfo\n      #.....................................................................................................\n      ### Instead of doing proper multi-characterset treatment,\n      consider all Private Use Area CPs and all non-Unicode CPs as being CJK: ###\n      if ( rsg is 'u-pua' ) or ( csg isnt 'u' )\n        tag = R[ 'tag' ] ? []\n        tag.push 'assigned'   unless 'assigned'   in tag\n        tag.push 'cjk'        unless 'cjk'        in tag\n        tag.push 'ideograph'  unless 'ideograph'  in tag\n        R[ 'tag' ] = ( t for t in tag when t isnt 'pua' )\n        if rsg is 'u-pua'\n          R[ 'rsg'    ] = 'jzr'\n          R[ 'csg'    ] = 'jzr'\n          R[ 'fncr'   ] = R[ 'fncr'   ].replace 'u-pua-', 'jzr-'\n          R[ 'sfncr'  ] = R[ 'sfncr'  ].replace 'u-',     'jzr-'\n          R[ 'xncr'   ] = R[ 'xncr'   ].replace '&#x',    '&jzr#x'\n          R[ 'chr'    ] = R[ 'xncr'   ]\n        if R[ 'csg' ] is 'jzr' and not R[ 'tex' ]?\n          R[ 'tex' ] = ( @describe R[ 'cid' ] )[ 'tex' ]\n      #.....................................................................................................\n      cache[ id ] = R\n      return R\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nnew_state = ->\n  R                           = {}\n  R.paths                     = {}\n  R.paths.cache               = PATH.resolve __dirname, '../data/isl-entries.json'\n  R.paths.mkts_options        = PATH.resolve __dirname, '../../mingkwai-typesetter/lib/options.js'\n  # R.paths.jizura_datasources  = PATH.resolve __dirname, '../../../jizura-datasources/data/flat-files/'\n  # R.paths.sims                = PATH.resolve R.paths.jizura_datasources, 'shape/shape-similarity-identity.txt'\n  R.collector                 = []\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nread_cache = ( handler = null ) ->\n  help \"reading cache\"\n  warn \"cache may be stale; check with mingkwai file-date-checker\"\n  S = new_state()\n  ISL.add u, entry for entry in require S.paths.cache\n  handler null, S if handler?\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nrewrite_cache = ( handler = null ) ->\n  help \"rewriting cache\"\n  S = new_state()\n  #.........................................................................................................\n  step ( resume ) ->\n    yield populate_isl_with_tex_formats  S, resume\n    # yield populate_isl_with_sims         S, resume\n    yield populate_isl_with_extra_data   S, resume\n    # debug '44743', S\n    FS.writeFileSync S.paths.cache, JSON.stringify S.collector, null, '  '\n    ISL.add u, entry for entry in S.collector\n    #.......................................................................................................\n    handler null, S if handler?\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\npopulate_isl_with_tex_formats = ( S, handler ) ->\n  #.........................................................................................................\n  mkts_options              = require S.paths.mkts_options\n  tex_command_by_rsgs       = mkts_options[ 'tex' ][ 'tex-command-by-rsgs' ]\n  glyph_styles              = mkts_options[ 'tex' ][ 'glyph-styles'        ]\n  cjk_rsgs                  = mkts_options[ 'tex' ][ 'cjk-rsgs'            ]\n  #.........................................................................................................\n  fallback_command          = block_style_as_tex tex_command_by_rsgs[ 'fallback' ] ? 'mktsRsgFb'\n  S.collector.push { lo: 0x000000, hi: 0x10ffff, tex: { block: fallback_command, }, }\n  #.........................................................................................................\n  for rsg, block_command of tex_command_by_rsgs\n    continue if rsg is 'fallback'\n    for entry in ISL.find_entries u, 'rsg', rsg\n      ### Note: must push new entries to collector, cannot recycle existing ones here ###\n      # target            = entry[ 'tex' ] ?= {}\n      # target[ 'block' ] = block_style_as_tex block_command\n      { lo, hi, tex, }  = entry\n      tex              ?= {}\n      tex[ 'block' ]    = block_style_as_tex block_command # unless block_command is 'latin'\n      S.collector.push { lo, hi, tex, }\n  #.........................................................................................................\n  ### TAINT must resolve (X)NCRs ###\n  for glyph, glyph_style of glyph_styles\n    continue unless glyph_style?\n    cid             = MKNCR.as_cid glyph\n    glyph_style_tex = glyph_style_as_tex glyph, glyph_style\n    S.collector.push { lo: cid, hi: cid, tex: { codepoint: glyph_style_tex, }, }\n  #.........................................................................................................\n  for rsg in cjk_rsgs\n    for entry in ISL.find_entries u, 'rsg', rsg\n      ### Note: must push new entries to collector, cannot recycle existing ones here ###\n      { lo, hi, }  = entry\n      S.collector.push { lo, hi, tag: [ 'cjk', ], }\n  #.........................................................................................................\n  handler null, S\n\n#-----------------------------------------------------------------------------------------------------------\npopulate_isl_with_extra_data = ( S, handler ) ->\n  for chr in Array.from '\\x20\\n\\r\\t'\n    lo = hi = MKNCR.as_cid chr\n    S.collector.push { lo, hi, tag: [ 'ascii-whitespace' ] }\n  #.........................................................................................................\n  handler null, S\n\n#-----------------------------------------------------------------------------------------------------------\npopulate_isl_with_sims = ( S, handler ) ->\n  ###\n    target glyph          source glyph\n    favored               disfavored\n    `sim/has-source`\n    `sim/is-target`\n                          `sim/is-source`\n                          `sim/has-target`\n  ###\n  PS                        = require 'pipestreams'\n  { $\n    $async }                = PS\n  #.........................................................................................................\n  $add_intervals = =>\n    return $ 'null', ( phrase, send ) =>\n      unless phrase?\n        return handler null, S\n      send phrase\n      [ target_glyph\n        otag\n        source_glyph ]  = phrase\n      return unless ( MKNCR.is_inner_glyph target_glyph )\n      return unless ( MKNCR.is_inner_glyph source_glyph )\n      source_cid        = MKNCR.as_cid source_glyph\n      target_cid        = MKNCR.as_cid target_glyph\n      otag              = otag.replace /^sim\\//, ''\n      mtag              = \"sim/target/#{otag}\"\n      ctag              = \"sim sim/has-target sim/is-source sim/has-target/#{otag} sim/is-source/#{otag} sim/#{otag}\"\n      # sim               = { \"#{otag}\": { target: target_glyph, }, }\n      S.collector.push { lo: source_cid, hi: source_cid, sim: mtag, \"#{mtag}\": target_glyph, tag: ctag, }\n      mtag              = \"sim/source/#{otag}\"\n      ctag              = \"sim sim/has-source sim/is-target sim/has-source/#{otag} sim/is-target/#{otag} sim/#{otag}\"\n      # sim               = { \"#{otag}\": { source: source_glyph, }, }\n      S.collector.push { lo: target_cid, hi: target_cid, sim: mtag, \"#{mtag}\": source_glyph, tag: ctag, }\n      return null\n  #.........................................................................................................\n  $collect_tags = =>\n    tags = new Set()\n    return $ 'null', ( record ) =>\n      if record? then tags.add record[ 'tag' ]\n      else debug '3334', tags\n      return null\n  #.........................................................................................................\n  SIMS            = require '../../mojikura/lib/read-sims'\n  # JZRDBF_U        = require '../../jizura-db-feeder/lib/utilities'\n  # S1              = JZRDBF_U.new_state()\n  # S1.db           = null\n  source          = SIMS.new_readstream()\n  # source          = SIMS.new_readstream null, gaiji: no\n  #.........................................................................................................\n  pipeline        = []\n  pipeline.push source\n  pipeline.push $add_intervals()\n  # pipeline.push PS.$show()\n  pipeline.push PS.$drain()\n  PS.pull pipeline...\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nblock_style_as_tex = ( block_style ) -> \"\\\\#{block_style}{}\"\n\n#-----------------------------------------------------------------------------------------------------------\nglyph_style_as_tex = ( glyph, glyph_style ) ->\n  ### NOTE this code replaces parts of `tex-writer-typofix._style_chr` ###\n  #.........................................................................................................\n  R         = []\n  R.push \"{\"\n  # R.push \"\\\\cn\" if is_cjk\n  rpl_push  = glyph_style[ 'push'   ] ? null\n  rpl_raise = glyph_style[ 'raise'  ] ? null\n  rpl_chr   = glyph_style[ 'glyph'  ] ? glyph\n  rpl_cmd   = glyph_style[ 'cmd'    ] ? null\n  # rpl_cmd   = glyph_style[ 'cmd'    ] ? rsg_command\n  # rpl_cmd   = null if rpl_cmd is 'cn'\n  #.........................................................................................................\n  if      rpl_push? and rpl_raise?  then R.push \"\\\\mktstfPushRaise{#{rpl_push}}{#{rpl_raise}}\"\n  else if rpl_push?                 then R.push \"\\\\mktstfPush{#{rpl_push}}\"\n  else if               rpl_raise?  then R.push \"\\\\mktstfRaise{#{rpl_raise}}\"\n  #.........................................................................................................\n  if rpl_cmd?                       then R.push \"\\\\#{rpl_cmd}{}\"\n  R.push rpl_chr\n  R.push \"}\"\n  R = R.join ''\n  return R\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nmain = ->\n  return read_cache() if module.parent?\n  rewrite_cache()\nmain()\n\n\n"
  ]
}