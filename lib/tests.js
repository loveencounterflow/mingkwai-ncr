// Generated by CoffeeScript 1.10.0
(function() {
  var CND, alert, badge, debug, echo, help, info, log, rpr, step, test, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'NCR-UNICODE-CACHE-WRITER/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  step = require('coffeenode-suspend').step;

  test = require('guy-test');

  this["(v2) create derivatives of NCR (3)"] = function(T) {
    var ISL, area, block, cid, cid_hex, glyph, i, len, plane, reducers, ref, ref1, rsg, style, tag, tex, u;
    ISL = require('interskiplist');

    /* General data */
    u = ISL.copy(require('./unicode-isl'));

    /* CJK-specific data */
    this._Unicode_demo_add_cjk_tags(u);

    /* Jizura-specific data */
    this._Unicode_demo_add_jzr_tag(u);
    this._Unicode_demo_add_sims(u);

    /* Mingkwai-specific data */
    this._Unicode_demo_add_styles(u);
    ISL.add(u, {
      lo: 0x0,
      hi: 0x10ffff,
      tag: 'foo bar'
    });
    reducers = {
      name: 'skip',
      tex: 'list',
      style: 'list',
      type: 'skip'
    };
    ref = Array.from('《A↻\ue000鿕\u9fd6');
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      cid = glyph.codePointAt(0);
      cid_hex = hex(cid);
      ref1 = ISL.aggregate(u, cid, reducers), plane = ref1.plane, area = ref1.area, block = ref1.block, rsg = ref1.rsg, tag = ref1.tag, tex = ref1.tex, style = ref1.style;
      if (rsg == null) {
        rsg = 'u-???';
      }
      tag = tag.join(', ');
      urge(cid_hex, CND.lime(rpr(glyph)), CND.gold(plane + " / " + area + " / " + block + " / " + rsg), CND.white(tag));
    }
    return null;
  };

  this._Unicode_demo_show_sample = function(isl) {
    var XNCR, _, cid, cid_hex, description, descriptions, glyph, i, j, key, len, len1, ref, ref1, ref2, type, value;
    XNCR = require('./xncr');
    ref = XNCR.chrs_from_text("helo äöü你好𢕒𡕴𡕨𠤇𫠠𧑴𨒡《》【】&jzr#xe100;🖹");
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      cid = XNCR.as_cid(glyph);
      cid_hex = hex(cid);
      descriptions = ISL.find_entries_with_all_points(u, cid);
      urge(glyph, cid_hex);
      for (j = 0, len1 = descriptions.length; j < len1; j++) {
        description = descriptions[j];
        ref2 = ((ref1 = description['name']) != null ? ref1 : '???/').split(':'), type = ref2[0], _ = ref2[1];
        help((CND.grey(type + '/')) + (CND.steel('interval')) + ': ' + (CND.yellow((hex(description['lo'])) + "-" + (hex(description['hi'])))));
        for (key in description) {
          value = description[key];
          if (key === 'lo' || key === 'hi' || key === 'id') {
            continue;
          }
          help((CND.grey(type + '/')) + (CND.steel(key)) + ': ' + (CND.yellow(value)));
        }
      }
    }
    return null;
  };

  this._Unicode_demo_add_styles = function(isl) {
    var ISL, XNCR, cid, cid_hex, glyph, hi, lo, mkts_options, name, ref, rsg, style, tex, tex_command_by_rsgs;
    ISL = require('interskiplist');
    XNCR = require('./xncr');
    mkts_options = require('../../mingkwai-typesetter/options');
    tex_command_by_rsgs = mkts_options['tex']['tex-command-by-rsgs'];
    lo = 0x000000;
    hi = 0x10ffff;
    tex = tex_command_by_rsgs['fallback'];
    name = "style:fallback";
    ISL.add(isl, {
      name: name,
      lo: lo,
      hi: hi,
      tex: tex
    });
    ref = mkts_options['tex']['glyph-styles'];
    for (glyph in ref) {
      style = ref[glyph];
      glyph = XNCR.normalize_glyph(glyph);
      rsg = XNCR.as_rsg(glyph);
      cid = XNCR.as_cid(glyph);
      lo = hi = cid;
      cid_hex = hex(cid);
      name = "glyph-" + cid_hex;
      name = "style:" + name;
      ISL.add(isl, {
        name: name,
        lo: lo,
        hi: hi,
        rsg: rsg,
        style: style
      });
    }
    return isl;
  };

  this._Unicode_demo_add_cjk_tags = function(isl) {
    var ISL, hi, lo, range, ranges, ref, rsg, rsg_registry, tag;
    ISL = require('interskiplist');
    rsg_registry = require('./character-sets-and-ranges');
    ranges = rsg_registry['names-and-ranges-by-csg']['u'];
    ref = rsg_registry['tag-by-rsgs'];
    for (rsg in ref) {
      tag = ref[rsg];
      if ((range = ranges[rsg]) == null) {
        continue;
      }
      lo = range['first-cid'];
      hi = range['last-cid'];
      ISL.add(isl, {
        lo: lo,
        hi: hi,
        tag: tag
      });
    }
    return isl;
  };

  this._Unicode_demo_add_jzr_tag = function(isl) {
    var ISL, hi, lo, range, ranges, ref, rsg, rsg_registry, tag;
    ISL = require('interskiplist');
    rsg_registry = require('./character-sets-and-ranges');
    ranges = rsg_registry['names-and-ranges-by-csg']['jzr'];
    ref = rsg_registry['tag-by-rsgs'];
    for (rsg in ref) {
      tag = ref[rsg];
      if ((range = ranges[rsg]) == null) {
        continue;
      }
      debug('©74688', range, rsg, tag);
      lo = range['first-cid'];
      hi = range['last-cid'];
      ISL.add(isl, {
        lo: lo,
        hi: hi,
        tag: tag
      });
    }
    return isl;
  };

  this._Unicode_demo_add_sims = function(isl) {
    var ISL;
    ISL = require('interskiplist');
    return isl;
  };

}).call(this);

//# sourceMappingURL=tests.js.map
