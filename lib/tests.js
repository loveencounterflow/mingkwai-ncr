// Generated by CoffeeScript 1.10.0
(function() {
  var CND, ISL, MKNCR, alert, badge, debug, echo, help, include, info, log, rpr, test, u, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'MINGKWAI-NCR/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  MKNCR = require('./main');

  ISL = MKNCR._ISL;

  u = MKNCR.unicode_isl;

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    return test(this, {
      'timeout': 3000
    });
  };

  this["demo"] = function(T) {
    var cid, glyph, i, len, ref;
    ref = MKNCR.chrs_from_text("ã€ŠðŸ–¹");
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      cid = MKNCR.as_cid(glyph);
      debug(glyph, ISL.aggregate(u, cid));
    }
    return null;
  };

  this["aggregate"] = function(T) {
    var i, len, matcher, probe, probes_and_matchers, reducers, ref, result;
    u = MKNCR.unicode_isl;
    ISL = MKNCR._ISL;
    probes_and_matchers = [
      [
        'q', {
          "tag": ["assigned"],
          "rsg": "u-latn"
        }
      ], [
        'é‡Œ', {
          "tag": ["assigned", "cjk", "ideograph"],
          "rsg": "u-cjk"
        }
      ], [
        'äŠ·', {
          "tag": ["assigned", "cjk", "ideograph"],
          "rsg": "u-cjk-xa"
        }
      ], [
        'ã€Š', {
          "tag": ["assigned", "cjk", "punctuation"],
          "rsg": "u-cjk-sym"
        }
      ], [
        'ðŸ–¹', {
          "tag": ["assigned"]
        }
      ], [
        String.fromCodePoint(0x1f6f7), {
          "tag": ["unassigned"]
        }
      ], [
        887, {
          "tag": ["assigned"],
          "rsg": "u-grek"
        }
      ], [
        888, {
          "tag": ["unassigned"],
          "rsg": "u-grek"
        }
      ], [
        889, {
          "tag": ["unassigned"],
          "rsg": "u-grek"
        }
      ], [
        890, {
          "tag": ["assigned"],
          "rsg": "u-grek"
        }
      ]
    ];
    reducers = {};
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
      result = ISL.aggregate(u, probe, reducers);
      debug('32771', probe, JSON.stringify(result));
      T.eq(result, matcher);
    }
    return null;
  };

  if (module.parent == null) {
    include = ["aggregate"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
